version: 2.1

orbs:
  slack: circleci/slack@4.1.1
  aws-cli: circleci/aws-cli@1.3.1

commands:
  notify_slack:
    steps:
      - run:
          name: Set git Commit Message
          command: |
            echo 'export GIT_COMMIT_DESC=$(git log --oneline -1 --pretty=format:"%h %s")' >> $BASH_ENV
            source $BASH_ENV
      - slack/notify:
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": ":exclamation: *${CIRCLE_JOB}* job failed! \n"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Build job:*\n${CIRCLE_JOB}\n"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n${GIT_COMMIT_DESC}\n"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n${CIRCLE_BRANCH}\n"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Project:*\n${CIRCLE_PROJECT_REPONAME}"
                    }
                  ]
                }
              ]
            }
      - slack/notify:
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": ":tada: *${CIRCLE_JOB}* succeeded!\n"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Build job:*\n${CIRCLE_JOB}\n"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:*\n${GIT_COMMIT_DESC}\n"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n${CIRCLE_BRANCH}\n"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Project:*\n${CIRCLE_PROJECT_REPONAME}"
                    }
                  ]
                }
              ]
            }

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Empty current S3 bucket
          command: |
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID} --force
          when: on_fail
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            MIGRATION_RESULT=$(curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID})
            if [[ $MIGRATION_RESULT==1 ]];
            then
             cd backend
             npm i
             npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run lint
            npm run build
      - notify_slack
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end build
          command: |
            cd backend
            npm i
            npm run build
      - notify_slack
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend tests
          command: |
            cd frontend
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend tests
          command: |
            cd backend
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/base:2020.11
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --tags project=backend \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=frontend \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt)
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT --data "$BACKEND_IP" https://api.memstash.io/values/backend-ip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d8:f8:a2:a4:e4:30:4c:e4:30:2d:d7:11:4f:75:72:95"]
      - attach_workspace:
          at: ~/
      - run:
          name: Populate environment variables
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_HOST=${TYPEORM_HOST} >> "backend/.env"
            echo TYPEORM_PORT=${TYPEORM_PORT} >> "backend/.env"
            echo TYPEORM_USERNAME=${TYPEORM_USERNAME} >> "backend/.env"
            echo TYPEORM_PASSWORD=${TYPEORM_PASSWORD} >> "backend/.env"
            echo TYPEORM_DATABASE=${TYPEORM_DATABASE} >> "backend/.env"
            cat backend/.env
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible curl
            pip install awscli
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - aws-cli/setup
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd ~/project/backend
            npm run migrations >> migration_results.txt
            if grep -Fxq "has been executed successfully" migration_results.txt
            then
              echo "New migration ran!"
              echo 'export RESULT=1' >> $BASH_ENV
            else
              echo "No new migration!"
              echo 'export RESULT=0' >> $BASH_ENV
            fi
            source $BASH_ENV
      - run:
          name: Send migration results to memstash
          command: |
            echo $RESULT
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT --data "$RESULT" https://api.memstash.io/values/migration-${CIRCLE_WORKFLOW_ID}
      - destroy-environment

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d8:f8:a2:a4:e4:30:4c:e4:30:2d:d7:11:4f:75:72:95"]
      - restore_cache:
          keys: [frontend-build]
      - aws-cli/setup
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/backend-ip)
            export API_URL="http://${BACKEND_IP}:3030"
            cd frontend
            echo "API_URL=${API_URL}" >> .env
            cat .env
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
      - revert-migrations
      - destroy-environment

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d8:f8:a2:a4:e4:30:4c:e4:30:2d:d7:11:4f:75:72:95"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible curl nodejs npm openssh-client
            pip install awscli
            npm install -g typescript
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            cd backend
            touch .env
            echo ENVIRONMENT=production > ".env"
            echo TYPEORM_HOST=${TYPEORM_HOST} >> ".env"
            echo TYPEORM_PORT=${TYPEORM_PORT} >> ".env"
            echo TYPEORM_USERNAME=${TYPEORM_USERNAME} >> ".env"
            echo TYPEORM_PASSWORD=${TYPEORM_PASSWORD} >> ".env"
            echo TYPEORM_DATABASE=${TYPEORM_DATABASE} >> ".env"
            echo TYPEORM_CONNECTION=postgres >> ".env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"

            cd ../.circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      - revert-migrations
      - destroy-environment

#   smoke-test:
#     docker:
#       # Lightweight Docker image
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure

# cleanup:
#   docker:
#     # Docker image here
#   steps:
#     # Checkout code from git
#     - run:
#         name: Get old stack workflow id
#         command: |
#           # your code here
#           export OldWorkflowID="the id here"
#           export STACKS=[] #put the list of stacks here
#     - run:
#         name: Remove old stacks and files
#         command: |
#           if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#           then
#             # your code here
#           fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
